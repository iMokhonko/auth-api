const { createClient } = require('redis');

const createReponse = require('./helpers/create-response');
const transformUnitToTTL = require('./helpers/transform-unit-to-ttl');
const generateRateLimitHeaders = require('./helpers/generate-rate-limit-headers');
const executeNext = require('./helpers/execute-next');

const redisClient = createClient({ 
  // Lambdas that include this layer should provide REDIS_ENDPOINT and REDIS_PORT env variables.
  // They will be used for redis connection.
  url: `rediss://${process.env.REDIS_ENDPOINT}:${process.env.REDIS_PORT}`,
  tls: true
});

exports.ipRateLimiter = async (event, context, options = {}, next) => {
  !redisClient.isReady && await redisClient.connect();

  const { sourceIp } = event.requestContext?.http ?? {};

  const {
    rateLimit = 5,
    rateLimitUnit = 'minute'
  } = options;

  const ruleTTL = transformUnitToTTL(rateLimitUnit); // hour -> 60 * 60
  const redisRateLimitKey = `${process.env.AWS_LAMBDA_FUNCTION_NAME}:${sourceIp}`;

  const rateLimitValue = await redisClient.get(redisRateLimitKey);

  if(rateLimitValue === null) {
    await redisClient.set(
      redisRateLimitKey, 
      rateLimit - 1, 
      { EX: ruleTTL }
    );

    return await executeNext(
      event, 
      context, 
      next, 
      generateRateLimitHeaders(
        rateLimit, 
        rateLimit - 1, 
        await redisClient.ttl(redisRateLimitKey)
      )
    );
  } else {
    // rate limit exceeded
    if(rateLimitValue < 1) {
      return createReponse(
        429, 
        null, 
        generateRateLimitHeaders(
          rateLimit, 
          0,
          await redisClient.ttl(redisRateLimitKey)
        )
      );
    } else {
      // decrement rate limit value by one and allow request
      await redisClient.decrBy(redisRateLimitKey, 1);

      // call next handler
     return await executeNext(
        event, 
        context, 
        next, 
        generateRateLimitHeaders(
          rateLimit, 
          rateLimitValue - 1, 
          await redisClient.ttl(redisRateLimitKey)
        )
      );
    }
  }
}